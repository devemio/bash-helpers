#!/bin/bash

# Inspired by https://github.com/loganstellway/mysqldump-remote

LOCAL_MYSQL_HOST="localhost"
LOCAL_MYSQL_USER="root"
LOCAL_MYSQL_PWD=""
LOCAL_MYSQL_DB=""

REMOTE_MYSQL_HOST="localhost"
REMOTE_MYSQL_USER="root"
REMOTE_MYSQL_PWD=""
REMOTE_MYSQL_DB=""

SSH_HOST=""
SSH_USER=""
SSH_PASSWORD=""

VERBOSE=0
SSH_VERBOSE=""
MYSQL_VERBOSE=""

CMD=""
SCRIPT_NAME=$(basename $0)
DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# Colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
reset=$(tput sgr0)

# Help screen
help() {
    echo -n "${yellow}Usage:${reset}
  $SCRIPT_NAME [options]

${yellow}Options:${reset}
  ${green}-h, --local-mysql-host${reset}       Database host on the local machine ${yellow}[default: \"localhost\"]${reset}
  ${green}-u, --local-mysql-user${reset}       Database user on the local machine ${yellow}[default: \"root\"]${reset}
  ${green}-p, --local-mysql-password${reset}   Database password on the local machine
  ${green}-d, --local-mysql-database${reset}   Database name on the local machine
  ${green}    --remote-mysql-host${reset}      Database host on the remote machine ${yellow}[default: \"localhost\"]${reset}
  ${green}    --remote-mysql-user${reset}      Database user on the remote machine ${yellow}[default: \"root\"]${reset}
  ${green}    --remote-mysql-password${reset}  Database password on the remote machine
  ${green}    --remote-mysql-database${reset}  Database name on the remote machine
  ${green}    --ssh-host${reset}               SSH host
  ${green}    --help${reset}                   Display this help message
  ${green}-v|vv, --verbose${reset}             Verbose output

${yellow}Help:${reset}
  Bash utility for pulling databases from remote hosts
"
}

# Process arguments
while [ "$1" != "" ]; do
  PARAM=`echo $1 | awk -F= '{print $1}'`
  VALUE=`echo $1 | awk -F= '{print $2}'`
  case $PARAM in
    --help) help; exit ;;
    -h|--local-mysql-host) LOCAL_MYSQL_HOST=$VALUE ;;
    -u|--local-mysql-user) LOCAL_MYSQL_USER=$VALUE ;;
    -p|--local-mysql-password) LOCAL_MYSQL_PWD=$VALUE ;;
    -d|--local-mysql-database) LOCAL_MYSQL_DB=$VALUE ;;
    --remote-mysql-host) REMOTE_MYSQL_HOST=$VALUE ;;
    --remote-mysql-user) REMOTE_MYSQL_USER=$VALUE ;;
    --remote-mysql-password) REMOTE_MYSQL_PWD=$VALUE ;;
    --remote-mysql-database) REMOTE_MYSQL_DB=$VALUE ;;
    --ssh-host) SSH_HOST=$VALUE ;;
    # --ssh-user) SSH_USER=$VALUE ;;
    # --ssh-port) SSH_PORT=$VALUE ;;
    # --ssh-key) SSH_KEY=$VALUE ;;
    # -c|--compress) COMPRESS=1 ;;
    # -o|--output) OUTPUT=$VALUE ;;
    # -e|--env) ENV=$VALUE ;;
    # -f|--file-name) FILENAME=$VALUE ;;
    # --prefix) PREFIX=$VALUE ;;
    # --suffix) SUFFIX=$VALUE ;;
    -v|--verbose) VERBOSE=1 ;;
    -vv) VERBOSE=2 ;;
    *) echo "${red}ERROR: unknown parameter \"$PARAM\"${reset}"; help; exit 1 ;;
  esac
  shift
done

prepare() {
    if [ ! -z $LOCAL_MYSQL_PWD ]; then
        LOCAL_MYSQL_PWD="-p'$LOCAL_MYSQL_PWD'"
    fi

    if [ ! -z $REMOTE_MYSQL_PWD ]; then
        REMOTE_MYSQL_PWD="-p'$REMOTE_MYSQL_PWD'"
    fi

    if [ -z $REMOTE_MYSQL_DB ]; then
        REMOTE_MYSQL_DB=$LOCAL_MYSQL_DB
    fi

    if [ $VERBOSE -gt 1 ]; then
        SSH_VERBOSE="-v"
    fi

    if [ $VERBOSE -gt 0 ]; then
        MYSQL_VERBOSE="-v"
    fi
}

validate() {
    if [ -z $SSH_HOST ]; then
        echo -n "SSH Host: "
        read SSH_HOST
    fi

    if [ -z $LOCAL_MYSQL_DB ]; then
        echo -n "MySQL Database Name: "
        read LOCAL_MYSQL_DB
    fi
}

run() {
    FILENAME="$DIR/db.sql"
    LOCAL_MYSQL_CONNECT="mysql $MYSQL_VERBOSE -h $LOCAL_MYSQL_HOST -u $LOCAL_MYSQL_USER $LOCAL_MYSQL_PWD"
    REMOTE_MYSQL_DUMP="mysqldump $MYSQL_VERBOSE -h $REMOTE_MYSQL_HOST -u $REMOTE_MYSQL_USER $REMOTE_MYSQL_PWD $REMOTE_MYSQL_DB"

    CMD="ssh $SSH_HOST $SSH_VERBOSE '$REMOTE_MYSQL_DUMP | gzip -c' | gunzip > $FILENAME"
    CMD="$CMD && $LOCAL_MYSQL_CONNECT -e 'DROP DATABASE IF EXISTS $LOCAL_MYSQL_DB; CREATE DATABASE $LOCAL_MYSQL_DB;'"
    CMD="$CMD && $LOCAL_MYSQL_CONNECT $LOCAL_MYSQL_DB < $FILENAME"
    eval $CMD

    CMD="rm $FILENAME"
    eval $CMD
}

validate
prepare
run